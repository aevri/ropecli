#! /usr/bin/env python3
"""A command-line tool for refactoring Python programs."""

import argparse
import sys

import rope
import rope.base.project
import rope.base.libutils
import rope.refactor.rename
import rope.refactor.move


def main():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=__doc__)

    subparsers = parser.add_subparsers()

    # Work around a bug in argparse with subparsers no longer being required:
    # http://bugs.python.org/issue9253#msg186387
    subparsers.required = True
    subparsers.dest = 'command'

    # vulture will report these as unused unless we do this
    #
    # pylint: disable=pointless-statement
    subparsers.required
    subparsers.dest
    # pylint: enable=pointless-statement

    _setup_parser_for_funcs(subparsers, 'move', move_setup, move_do)

    args = parser.parse_args()
    return args.func(args)


def _setup_parser_for_funcs(subparsers, name, setup_func, do_func):
    doc = setup_func.__doc__
    doc_subject = doc.splitlines()[0]
    doc_epilog = '\n'.join(doc.splitlines()[1:])
    parser = subparsers.add_parser(
        name,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        help=doc_subject,
        description=doc_subject,
        epilog=doc_epilog)
    setup_func(parser)
    parser.set_defaults(func=do_func)


def move_setup(parser):
    """Move items between modules."""
    parser.add_argument('fromfile')
    parser.add_argument('offset', type=int)
    parser.add_argument('tofile')
    parser.add_argument('--force', '-f', action='store_true')


def move_do(args):
    project = rope.base.project.Project(
        '.', ropefolder='.clirope')

    filefrom = rope.base.libutils.path_to_resource(
        project, args.fromfile)

    project.validate(filefrom)

    fileto = rope.base.libutils.path_to_resource(
        project, args.tofile)

    project.validate(fileto)

    mover = rope.refactor.move.create_move(project, filefrom, args.offset)
    changes = mover.get_changes(fileto)
    if args.force:
        project.do(changes)
    else:
        print(changes.get_description())


if __name__ == "__main__":
    sys.exit(main())
